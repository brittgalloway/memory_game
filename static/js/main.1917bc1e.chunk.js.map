{"version":3,"sources":["components/Nav/index.js","components/Footer/index.js","components/Image/index.js","App.js","serviceWorker.js","index.js"],"names":["Nav","score","topScore","className","role","aria-label","href","src","process","alt","id","Footer","Image","img","name","handleClick","isClicked","onClick","App","state","images","event","target","clickedImage","find","parseInt","highestScore","makeFalse","setState","shuffleArray","newImgArray","filter","updatedArray","currentScore","alert","map","imgArray","index","length","randomized","Math","floor","random","temp","this","image","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1917bc1e.chunk.js","sourcesContent":["import React from \"react\";\nimport \"../../app.css\";\nfunction Nav({ score, topScore }) {\n  return (\n    <>\n      <nav\n        className=\"navbar is-fixed-top\"\n        role=\"navigation\"\n        aria-label=\"main navigation\"\n      >\n        <div className=\"navbar-brand\">\n          <a className=\"navbar-item\" href=\"https://sleepygallows.com/\">\n            <img\n              src={process.env.PUBLIC_URL + \"/images/sg_logo.webp\"}\n              alt=\"Sleepy Gallows Logo\"\n            />\n          </a>\n\n          <h1 className=\"title is-1 navbar-item\">Memory Game</h1>\n          <h2 className=\"subtitle navbar-item \">\n            Score:{score} | Top Score:{topScore}\n          </h2>\n        </div>\n      </nav>\n      <section>\n        <img\n          id=\"headImg\"\n          alt=\"plh cover\"\n          src={process.env.PUBLIC_URL + \"/images/plhGame.svg\"}\n        />\n      </section>\n    </>\n  );\n}\n\nexport default Nav;\n","import React from \"react\";\r\n\r\nfunction Footer() {\r\n  return (\r\n    <footer className=\"footer\">\r\n      <div className=\"content has-text-centered\">\r\n        <p>\r\n          <strong>Brittney Galloway</strong> |\r\n          <a href=\"https://sleepygallows.com/for-peace-love-and-harmony\">\r\n            For Peace, Love, and Harmony\r\n          </a>\r\n          | Made with REACT\r\n        </p>\r\n      </div>\r\n    </footer>\r\n  );\r\n}\r\n\r\nexport default Footer;\r\n","import React from \"react\";\n\nfunction Image({ img, name, id, handleClick, isClicked }) {\n  return (\n    <div className=\"column is-one-fifth    \">\n      <div className=\"box\">\n        <figure>\n          <img src={img} alt={name} id={id} onClick={handleClick} />\n        </figure>\n        {/* for testing */}\n        {/* <p>{isClicked.toString()}</p> */}\n      </div>\n    </div>\n  );\n}\n\nexport default Image;\n","import React, { Component } from \"react\";\nimport Nav from \"./components/Nav\";\nimport Footer from \"./components/Footer\";\nimport Image from \"./components/Image\";\n// import Modal from \"./components/Modal\";\nimport images from \"./images.json\";\nimport \"./app.css\";\n\nclass App extends Component {\n  state = {\n    images,\n    score: 0,\n    topScore: 0\n  };\n\n  handleClick = event => {\n    const { id } = event.target;\n    //find the id of the clicked image\n    const clickedImage = this.state.images.find(img => img.id === parseInt(id));\n    //if clickedImage is false\n    if (!clickedImage.isClicked) {\n      //switch it to true\n      clickedImage.isClicked = true;\n      //find the images in the array that are not clicked\n      const newImgArray = this.state.images.filter(\n        img => img.id !== parseInt(id)\n      );\n      //insert the clickedImage into the newImgArray\n      const updatedArray = [clickedImage, ...newImgArray];\n      //update score\n      const currentScore = (this.state.score += 1);\n\n      this.setState({\n        images: this.shuffleArray(updatedArray),\n        score: currentScore\n      });\n      if (this.state.score === 16) {\n        alert(\"you win!\");\n      }\n    } else {\n      if (this.state.topScore < this.state.score) {\n        this.state.topScore = this.state.score;\n        const highestScore = this.state.topScore;\n        this.makeFalse();\n        this.setState({\n          images: this.shuffleArray(images),\n          score: 0,\n          topScore: highestScore\n        });\n      } else {\n        this.makeFalse();\n        const highestScore = this.state.topScore;\n        this.setState({\n          images: this.shuffleArray(images),\n          score: 0,\n          topScore: highestScore\n        });\n      }\n    }\n  };\n  makeFalse = () => {\n    this.state.images.map(img => {\n      if (img.isClicked === true) {\n        img.isClicked = false;\n      }\n      return img.isClicked;\n    });\n  };\n  shuffleArray = imgArray => {\n    let index = imgArray.length - 1;\n    while (index > 0) {\n      const randomized = Math.floor(Math.random() * (index + 1));\n      const temp = imgArray[index];\n      imgArray[index] = imgArray[randomized];\n      imgArray[randomized] = temp;\n      index--;\n    }\n    return imgArray;\n  };\n\n  render() {\n    return (\n      <>\n        {/* <Modal /> */}\n        <Nav score={this.state.score} topScore={this.state.topScore} />\n        <div className=\"container\">\n          <section id=\"images\">\n            <div className=\"columns is-multiline is-mobile\">\n              {this.state.images.map(image => (\n                <Image\n                  key={image.id}\n                  id={image.id}\n                  img={image.img}\n                  name={image.name}\n                  handleClick={this.handleClick}\n                  isClicked={image.isClicked}\n                />\n              ))}\n            </div>\n          </section>\n        </div>\n        <Footer />\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}