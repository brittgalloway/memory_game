{"version":3,"sources":["components/Image/index.js","App.js","serviceWorker.js","index.js"],"names":["Image","props","className","onClick","alert","src","img","alt","name","App","state","images","score","topScore","id","this","map","image","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sNAkBeA,MAhBf,SAAeC,GACb,OACE,yBAAKC,UAAU,yBAEb,yBACEC,QAAS,kBAAMC,MAAM,oDACrBF,UAAU,OAEV,gCACE,yBAAKG,IAAKJ,EAAMK,IAAKC,IAAKN,EAAMO,W,OC2C3BC,E,2MAjDbC,MAAQ,CACNC,SACAC,MAAO,EACPC,SAAU,G,wEA2BV,OACE,oCACE,6BAASC,GAAG,UACV,yBAAKZ,UAAU,kCACZa,KAAKL,MAAMC,OAAOK,KAAI,SAAAC,GAAK,OAC1B,kBAAC,EAAD,CACEC,IAAKD,EAAMH,GACXA,GAAIG,EAAMH,GACVR,IAAKW,EAAMX,IACXE,KAAMS,EAAMT,iB,GAxCVW,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.aa73b68e.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Image(props) {\n  return (\n    <div className=\"column is-one-quarter\">\n      {/* <div onClick={this.handleClick} className=\"box\"> */}\n      <div\n        onClick={() => alert(\"this will shuffle and keep score at some point!\")}\n        className=\"box\"\n      >\n        <figure>\n          <img src={props.img} alt={props.name} />\n        </figure>\n      </div>\n    </div>\n  );\n}\n\nexport default Image;\n","import React, { Component } from \"react\";\nimport Image from \"./components/Image\";\nimport images from \"./images.json\";\n\nclass App extends Component {\n  state = {\n    images,\n    score: 0,\n    topScore: 0\n  };\n  //on click shuffle cards\n  //check for true(clicked) false(if not yet clicked)\n  //if false when clicked, turn true\n  //if true when clicked, you lose, score is pushed to Top Score Array\n  // handleClick = () => {\n  //   this.setState({\n  //     isClicked: true\n  //   });\n\n  //   shuffleArray(images);\n  // };\n\n  // shuffleArray = imgOrder => {\n  //   let index = imgOrder.length - 1;\n  //   while (index > 0) {\n  //     const randomized = Math.floor(Math.random() * (index + 1));\n  //     const temp = imgOrder[index];\n  //     imgOrder[index] = imgOrder[randomized];\n  //     imgOrder[randomized] = temp;\n  //     index--;\n  //   }\n  //   return imgOrder;\n  // };\n\n  render() {\n    return (\n      <>\n        <section id=\"images\">\n          <div className=\"columns is-multiline is-mobile\">\n            {this.state.images.map(image => (\n              <Image\n                key={image.id}\n                id={image.id}\n                img={image.img}\n                name={image.name}\n              />\n            ))}\n          </div>\n        </section>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}